#
# sharp prefix.
#

# only `in' confilcts with `int'.
snippet inc "#include ... " bA
#include <${1:stdio.h}>$0
endsnippet

snippet "^de" "#define ..." brA
#define $0
endsnippet

#
# variable declaration
#

snippet st "struct definition" b
struct $1 {
	$2
}$0
endsnippet

#
# function
#

snippet mm "int main(int argc, char* argv[]){ ... }" bA
int main(int argc, char* argv[])
{
	${1}
	return 0;
}
${0}
endsnippet

snippet mn "int main(void){ ... }" bA
int main(void)
{
	${1}
	return 0;
}
${0}
endsnippet

snippet fu "func funcname(arg){ ... }" bA
${1:void} ${2:name}(${3:void})
{
	$4
}$0
endsnippet

snippet "p (".+?[^\\]")( (.*))?"  "printf" br
printf(`!p
snip.rv = match.group(1)

# if arguments exist
if match.group(2):
	for argument in match.group(3).split(' '):
		snip.rv += ", " + argument

snip.rv += ");"
`
endsnippet

snippet pu "puts" b
puts("$1");$0
endsnippet

snippet pc "putchar" b
putchar('$1');$0
endsnippet

snippet nl "putchar('\n');"
putchar('\n');$0
endsnippet

#
# for statement
#

snippet f0 "for (int i = 0; i < ... ; i++){ ... }" bA
for (int $1 = 0; $1 < $2; $1++){
	$3
}$0
endsnippet

snippet fp "for (int i = ...; i < ... ; i++){ ... }"
for (int $1 = $2; $1 < $3; $1++){
	$4
}$0
endsnippet

snippet fpe "for (int i = ...; i <= ...; i++){ ... }"
for (int $1 = $2; $1 <= $3; $1++){
	$4
}$0
endsnippet

snippet fn "for (int i = ...; i >= ...; i--){ ... }"
for (int $1 = $2; $1 >= $3; $1--) {
	$4
}$0
endsnippet


#
# if statement
#

snippet if "if ( ... ){ ... }"
if ($1){
	$2
}$0
endsnippet

snippet ei "else if" w
else if ($1){
	$2
}$0
endsnippet

snippet el "else" w
else {
	$1
}$0
endsnippet

snippet "if?e" "if else statement" r
if ($1){
	$2
}else{
	$3
}$0
endsnippet

#
# while
#

snippet w "while ( ... ){ ... }"
while ($1){
	$2
}$0
endsnippet

snippet do "do ... while statement" b
do {
	$1
}while($2)$0
endsnippet

#
# for
#

snippet for "general for"
for (int $1 = $2; $1 $3 $4; $1$5) {
	$6
}
$0


endsnippet

#
# others
#

snippet ret "return" bA
return $0
endsnippet

snippet s "struct ... { ... };"
struct $1 {
	$2
};
$0
endsnippet

