#
# include
#

snippet inc "include" bA
#include <${1:iostream}>$0
endsnippet

snippet inf "include from file" bA
#include "$1"$0
endsnippet

snippet ia "include algorithm"
#include <algorithm>
endsnippet

snippet iv "include vector"
#include <vector>
endsnippet

snippet is "include set"
#include <set>
endsnippet

snippet iq "include queue"
#include <queue>
endsnippet

#
# function
#

snippet mn "main no arguments" bA
int main()
{
	$0
}
endsnippet

snippet nl "newline"
putchar('\n');$0
endsnippet

#
# type
#

snippet stru "struct"
struct $1{
	$2
};$0
endsnippet

snippet v "vector" b
std::vector <$1> $0
endsnippet

snippet se "set"
std::set <$1> $0
endsnippet

snippet p "pair"
std::pair <$1,$2> $0
endsnippet

snippet stri "string"
std::string $0
endsnippet

#
# io
#

snippet "cin?" "cin" r
std::cin >> $0
endsnippet

snippet "co(ut?)?" "cout" r
std::cout << $0
endsnippet

snippet cia "cin to array"
for(int i = 0; i < $1; i++) {
	std::cin >> $2[i];
}$0
endsnippet

snippet cii "cin to int"
int $1;
std::cin`!p
args = [x for x in t[1].split(',')]
if args:
	for arg in args:
		snip.rv += " >> %s" % (arg)`;$0
endsnippet

snippet cis "cin to string"
std::string $1;
std::cin`!p
args = [x for x in t[1].split(',')]
if args:
	for arg in args:
		snip.rv += " >> %s" % (arg)`;$0
endsnippet

snippet civ "cin to vector"
std::vector<$1> $2($3);
for (int i = 0; i < $3; i++) {
	std::cin >> $2[i];
}
endsnippet

#
# if statement
#

snippet if "if statement"
if ($1) {
	$2
}$0
endsnippet

snippet ie "if else"
if ($1) {
	$2
} else {
	$3
}$0
endsnippet

#
# loop
#

snippet w "while" b
while ($1)
{
	$2
}$0
endsnippet

snippet f0 "for i=0 i<xxx i++" bA
for (int $1 = 0; $1 < $2; $1++){
	$3
}$0
endsnippet

snippet fa "for auto"
for (auto $1 : $2){
	$3
}$0
endsnippet

snippet fn "for negative way"
for (int $1 = $2; $1 >= $3; $1--){
	$4
}$0
endsnippet

#
# others
#

snippet "^de" "define" rA
#define $0
endsnippet

snippet ret "return" A
return $0
endsnippet

snippet mod "mod 10**9 + 7"
const int mod = 1000000007;$0
endsnippet

#
# .h file
#

snippet hdef "header define" bA
#ifndef $1
#define $1
$0
#endif
endsnippet
