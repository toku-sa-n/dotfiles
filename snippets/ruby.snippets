#
# minitest
#
snippet minitest "test_snip" bA
require 'minitest/autorun'
require_relative '../lib/$1'

class $2 < Minitest::Test
	def setup
		$3
	end

	$4
end$0
endsnippet

#
# library
#

snippet "^r" "require" rA
require '$1'$0
endsnippet

#
# class
#

snippet "^cl" "class definition" rA
class $1${2: < ${3:Interit}}
	$4
end$0
endsnippet

# separate the snippet of def initialize and class definition.
# in some cases it's not needed to declare initialize function.
snippet di "def initialize" bA
def initialize($1)`!p
snip >> 2
args = [x for x in t[1].split(',')]
if args:
	for arg in args:
		snip += "@%s = %s" % (arg, arg)
`
$2
end$0
endsnippet

#
# function definition
#

snippet de "function definition" bA
def $1($2)
	$3
end$0
endsnippet

#
# if statement
#

snippet if "if ... end"
if $1
	$2
end$0
endsnippet

snippet ie "if else end"
if $1
	$2
else
	$3
end$0
endsnippet

snippet el "elsif" b
elsif $1
	$2
endsnippet

#
# iteration methods.
#

snippet tt "t.times do ... end"
$1.times do${2: |${3:i}|}
	$4
end
$0
endsnippet

snippet et "(start...end).each do ... end"
($1..$2).each do${3: |${4:i}|}
	$5
end
endsnippet
snippet un "unless ... end"
unless $1
	$2
end$0
endsnippet

snippet w "while"
while $1
	$2
end$0
endsnippet
